diff --git a/Makefile b/Makefile
index 2162c72..93d6891 100644
--- a/Makefile
+++ b/Makefile
@@ -17,7 +17,7 @@ FROZEN_MPY_DIR ?= modules
 include $(TOP)/py/py.mk
 
 FWBIN = $(BUILD)/firmware-combined.bin
-PORT ?= /dev/ttyACM0
+PORT ?= /dev/ttyUSB0
 BAUD ?= 115200
 FLASH_MODE ?= qio
 FLASH_SIZE ?= detect
@@ -92,6 +92,7 @@ SRC_C = \
 	fatfs_port.c \
 	posix_helpers.c \
 	hspi.c \
+	ps2.c \
 	$(SRC_MOD)
 
 EXTMOD_SRC_C = $(addprefix extmod/,\
diff --git a/esp8266_common.ld b/esp8266_common.ld
index f4b4207..26fa957 100644
--- a/esp8266_common.ld
+++ b/esp8266_common.ld
@@ -167,6 +167,7 @@ SECTIONS
         *modlwip.o(.literal* .text*)
         *modsocket.o(.literal* .text*)
         *modonewire.o(.literal* .text*)
+        *ps2.o(.literal*, .text*)
 
         /* we put as much rodata as possible in this section */
         /* note that only rodata accessed as a machine word is allowed here */
diff --git a/esp_mphal.c b/esp_mphal.c
index 351bf52..fa88783 100644
--- a/esp_mphal.c
+++ b/esp_mphal.c
@@ -34,6 +34,7 @@
 #include "py/runtime.h"
 #include "extmod/misc.h"
 #include "lib/utils/pyexec.h"
+#include "ps2.h"
 
 STATIC byte stdin_ringbuf_array[256];
 ringbuf_t stdin_ringbuf = {stdin_ringbuf_array, sizeof(stdin_ringbuf_array), 0, 0};
@@ -62,6 +63,10 @@ int mp_hal_stdin_rx_chr(void) {
         if (c != -1) {
             return c;
         }
+	c = ps2_read();
+	if (c != 0) {
+	  return c;
+	}
         #if 0
         // Idles CPU but need more testing before enabling
         if (!ets_loop_iter()) {
diff --git a/intr.c b/intr.c
index 456d6cb..3fcc251 100644
--- a/intr.c
+++ b/intr.c
@@ -28,10 +28,15 @@
 #include "ets_alt_task.h"
 
 #include "modmachine.h"
+#include "ps2.h"
 
 // this is in a separate file so it can go in iRAM
 void pin_intr_handler_iram(void *arg) {
     uint32_t status = GPIO_REG_READ(GPIO_STATUS_ADDRESS);
     GPIO_REG_WRITE(GPIO_STATUS_W1TC_ADDRESS, status);
+    if (status & ps2_ClockMask) {
+      ps2_callback();
+      status = status ^ ps2_ClockMask;
+    }
     pin_intr_handler(status);
 }
diff --git a/modules/_boot.py b/modules/_boot.py
index 81eb20d..b379264 100644
--- a/modules/_boot.py
+++ b/modules/_boot.py
@@ -3,6 +3,8 @@ gc.threshold((gc.mem_free() + gc.mem_alloc()) // 4)
 import uos
 from flashbdev import bdev
 
+import mpconsole
+
 try:
     if bdev:
         uos.mount(bdev, '/')
diff --git a/mpconfigport.h b/mpconfigport.h
index 03be59b..3d4c838 100644
--- a/mpconfigport.h
+++ b/mpconfigport.h
@@ -169,6 +169,7 @@ extern const struct _mp_obj_module_t uos_module;
 extern const struct _mp_obj_module_t mp_module_lwip;
 extern const struct _mp_obj_module_t mp_module_machine;
 extern const struct _mp_obj_module_t mp_module_onewire;
+extern const struct _mp_obj_module_t mp_module_ps2;
 
 #define MICROPY_PORT_BUILTIN_MODULES \
     { MP_ROM_QSTR(MP_QSTR_esp), MP_ROM_PTR(&esp_module) }, \
@@ -178,6 +179,7 @@ extern const struct _mp_obj_module_t mp_module_onewire;
     { MP_ROM_QSTR(MP_QSTR_uos), MP_ROM_PTR(&uos_module) }, \
     { MP_ROM_QSTR(MP_QSTR_machine), MP_ROM_PTR(&mp_module_machine) }, \
     { MP_ROM_QSTR(MP_QSTR__onewire), MP_ROM_PTR(&mp_module_onewire) }, \
+    { MP_ROM_QSTR(MP_QSTR_ps2), MP_ROM_PTR(&mp_module_ps2) },     \
 
 #define MICROPY_PORT_BUILTIN_MODULE_WEAK_LINKS \
     { MP_ROM_QSTR(MP_QSTR_binascii), MP_ROM_PTR(&mp_module_ubinascii) }, \
diff --git a/ili9341.py b/ili9341.py
--- /dev/null
+++ ili9341.py
@@ -31,7 +31,7 @@
         (0xc1, b'\x10'),  # Power Control 2, SAP[2:0], BT[3:0]
         (0xc5, b'\x3e\x28'),  # VCM Control 1
         (0xc7, b'\x86'),  # VCM Control 2
-        (0x36, b'\x48'),  # Memory Access Control
+        (0x36, b'\xE8'),  # Memory Access Control
         (0x3a, b'\x55'),  # Pixel Format
         (0xb1, b'\x00\x18'),  # FRMCTR1
         (0xb6, b'\x08\x82\x27'),  # Display Function Control
diff --git a/fbconsole.py b/fbconsole.py
--- /dev/null
+++ fbconsole.py
@@ -23,6 +23,13 @@
         self.fgcolor = fgcolor
         self.line_height(8)
         self.cls()
+        self.enabled = True
+
+    def on(self):
+        self.enabled = True
+
+    def off(self):
+        self.enabled = False
 
     def cls(self):
         self.x = 0
@@ -62,6 +69,8 @@
         return n
 
     def write(self, buf):
+        if not self.enabled:
+            return len(buf)
         self._draw_cursor(self.bgcolor)
         i = 0
         while i < len(buf):
@@ -97,9 +106,10 @@
         self.x = 0
         self.y += 1
         if self.y >= self.h:
-            self.fb.scroll(0, -8)
-            self.fb.fill_rect(0, self.height - self.lineheight, self.width, self.lineheight, self.bgcolor)
-            self.y = self.h - 1
+            self.y = 0
+#            self.fb.scroll(0, -8)
+#            self.fb.fill_rect(0, self.height - self.lineheight, self.width, self.lineheight, self.bgcolor)
+#            self.y = self.h - 1
         self.y_end = self.y
 
     def _backspace(self):
